class Cycle2D {
    public boolean containsCycle(char[][] grid) {
        boolean[][] visited = new boolean[grid.length][grid[0].length];

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (!visited[i][j] && dfs(grid, i, j, -1, -1, grid[i][j], visited)) {
                    return true;

                }
            }
        }
        return false;
    }

    private boolean dfs(char[][] grid, int row, int col, int parRow, int parCol, char c, boolean[][] visited) {

        int[][] dimensions = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

        visited[row][col] = true;
        for (int[] dim : dimensions) {
            int newRow = row + dim[0];
            int newCol = col + dim[1];

            if (newRow >= 0 && newRow < grid.length &&
                    newCol >= 0 && newCol < grid[0].length && grid[newRow][newCol] == c) {
                if (!visited[newRow][newCol] && dfs(grid, newRow, newCol, row, col, c, visited)) {
                        return true;
                } else if (parRow != newRow || parCol != newCol) {
                    return true;
                }
            }
        }
        return false;
    }
}